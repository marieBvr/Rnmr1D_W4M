// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// SDL
SEXP SDL(SEXP x, double Sigma);
RcppExport SEXP Rnmr1D_SDL(SEXP xSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type Sigma(SigmaSEXP );
        SEXP __result = SDL(x, Sigma);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_write_pack
void C_write_pack(SEXP x, double pmin, double pmax, SEXP ff);
RcppExport SEXP Rnmr1D_C_write_pack(SEXP xSEXP, SEXP pminSEXP, SEXP pmaxSEXP, SEXP ffSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type pmin(pminSEXP );
        Rcpp::traits::input_parameter< double >::type pmax(pmaxSEXP );
        Rcpp::traits::input_parameter< SEXP >::type ff(ffSEXP );
        C_write_pack(x, pmin, pmax, ff);
    }
    return R_NilValue;
END_RCPP
}
// C_read_pack
SEXP C_read_pack(SEXP ff);
RcppExport SEXP Rnmr1D_C_read_pack(SEXP ffSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type ff(ffSEXP );
        SEXP __result = C_read_pack(ff);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_findPeaks
SEXP C_findPeaks(SEXP x, SEXP y, double sig, double DW, double minRatio, double minInt0, double minInt, bool bPlasma);
RcppExport SEXP Rnmr1D_C_findPeaks(SEXP xSEXP, SEXP ySEXP, SEXP sigSEXP, SEXP DWSEXP, SEXP minRatioSEXP, SEXP minInt0SEXP, SEXP minIntSEXP, SEXP bPlasmaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Rcpp::traits::input_parameter< SEXP >::type y(ySEXP );
        Rcpp::traits::input_parameter< double >::type sig(sigSEXP );
        Rcpp::traits::input_parameter< double >::type DW(DWSEXP );
        Rcpp::traits::input_parameter< double >::type minRatio(minRatioSEXP );
        Rcpp::traits::input_parameter< double >::type minInt0(minInt0SEXP );
        Rcpp::traits::input_parameter< double >::type minInt(minIntSEXP );
        Rcpp::traits::input_parameter< bool >::type bPlasma(bPlasmaSEXP );
        SEXP __result = C_findPeaks(x, y, sig, DW, minRatio, minInt0, minInt, bPlasma);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_corr_spec_re
SEXP C_corr_spec_re(SEXP l);
RcppExport SEXP Rnmr1D_C_corr_spec_re(SEXP lSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type l(lSEXP );
        SEXP __result = C_corr_spec_re(l);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_corr_spec_im
SEXP C_corr_spec_im(SEXP l);
RcppExport SEXP Rnmr1D_C_corr_spec_im(SEXP lSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type l(lSEXP );
        SEXP __result = C_corr_spec_im(l);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_phc0_fn
double C_phc0_fn(SEXP l, double phc0);
RcppExport SEXP Rnmr1D_C_phc0_fn(SEXP lSEXP, SEXP phc0SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type l(lSEXP );
        Rcpp::traits::input_parameter< double >::type phc0(phc0SEXP );
        double __result = C_phc0_fn(l, phc0);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_phc1_fn
double C_phc1_fn(SEXP l, double phc1);
RcppExport SEXP Rnmr1D_C_phc1_fn(SEXP lSEXP, SEXP phc1SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type l(lSEXP );
        Rcpp::traits::input_parameter< double >::type phc1(phc1SEXP );
        double __result = C_phc1_fn(l, phc1);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_optim_phc
double C_optim_phc(SEXP s, SEXP p, Function fn);
RcppExport SEXP Rnmr1D_C_optim_phc(SEXP sSEXP, SEXP pSEXP, SEXP fnSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type s(sSEXP );
        Rcpp::traits::input_parameter< SEXP >::type p(pSEXP );
        Rcpp::traits::input_parameter< Function >::type fn(fnSEXP );
        double __result = C_optim_phc(s, p, fn);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// lowpass1
SEXP lowpass1(SEXP x, double alpha);
RcppExport SEXP Rnmr1D_lowpass1(SEXP xSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP );
        SEXP __result = lowpass1(x, alpha);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// WinMoy
double WinMoy(SEXP v, int n1, int n2);
RcppExport SEXP Rnmr1D_WinMoy(SEXP vSEXP, SEXP n1SEXP, SEXP n2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type v(vSEXP );
        Rcpp::traits::input_parameter< int >::type n1(n1SEXP );
        Rcpp::traits::input_parameter< int >::type n2(n2SEXP );
        double __result = WinMoy(v, n1, n2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Smooth
SEXP Smooth(SEXP v, int n);
RcppExport SEXP Rnmr1D_Smooth(SEXP vSEXP, SEXP nSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type v(vSEXP );
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        SEXP __result = Smooth(v, n);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// Ajust_LB
void Ajust_LB(SEXP s, SEXP b, int n1, int n2);
RcppExport SEXP Rnmr1D_Ajust_LB(SEXP sSEXP, SEXP bSEXP, SEXP n1SEXP, SEXP n2SEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type s(sSEXP );
        Rcpp::traits::input_parameter< SEXP >::type b(bSEXP );
        Rcpp::traits::input_parameter< int >::type n1(n1SEXP );
        Rcpp::traits::input_parameter< int >::type n2(n2SEXP );
        Ajust_LB(s, b, n1, n2);
    }
    return R_NilValue;
END_RCPP
}
// C_Estime_LB
SEXP C_Estime_LB(SEXP l, SEXP s, int istart, int iend);
RcppExport SEXP Rnmr1D_C_Estime_LB(SEXP lSEXP, SEXP sSEXP, SEXP istartSEXP, SEXP iendSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type l(lSEXP );
        Rcpp::traits::input_parameter< SEXP >::type s(sSEXP );
        Rcpp::traits::input_parameter< int >::type istart(istartSEXP );
        Rcpp::traits::input_parameter< int >::type iend(iendSEXP );
        SEXP __result = C_Estime_LB(l, s, istart, iend);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// spec_ref_interval
SEXP spec_ref_interval(SEXP x, int istart, int iend);
RcppExport SEXP Rnmr1D_spec_ref_interval(SEXP xSEXP, SEXP istartSEXP, SEXP iendSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Rcpp::traits::input_parameter< int >::type istart(istartSEXP );
        Rcpp::traits::input_parameter< int >::type iend(iendSEXP );
        SEXP __result = spec_ref_interval(x, istart, iend);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_spec_ref
SEXP C_spec_ref(SEXP x);
RcppExport SEXP Rnmr1D_C_spec_ref(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        SEXP __result = C_spec_ref(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_MedianSpec
SEXP C_MedianSpec(SEXP x);
RcppExport SEXP Rnmr1D_C_MedianSpec(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        SEXP __result = C_MedianSpec(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_segment_shifts
SEXP C_segment_shifts(SEXP x, int istart, int iend, int decal_max);
RcppExport SEXP Rnmr1D_C_segment_shifts(SEXP xSEXP, SEXP istartSEXP, SEXP iendSEXP, SEXP decal_maxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Rcpp::traits::input_parameter< int >::type istart(istartSEXP );
        Rcpp::traits::input_parameter< int >::type iend(iendSEXP );
        Rcpp::traits::input_parameter< int >::type decal_max(decal_maxSEXP );
        SEXP __result = C_segment_shifts(x, istart, iend, decal_max);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_align_segment
int C_align_segment(SEXP x, SEXP s, int istart, int iend);
RcppExport SEXP Rnmr1D_C_align_segment(SEXP xSEXP, SEXP sSEXP, SEXP istartSEXP, SEXP iendSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Rcpp::traits::input_parameter< SEXP >::type s(sSEXP );
        Rcpp::traits::input_parameter< int >::type istart(istartSEXP );
        Rcpp::traits::input_parameter< int >::type iend(iendSEXP );
        int __result = C_align_segment(x, s, istart, iend);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_noise_estimation
double C_noise_estimation(SEXP x, int n1, int n2);
RcppExport SEXP Rnmr1D_C_noise_estimation(SEXP xSEXP, SEXP n1SEXP, SEXP n2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Rcpp::traits::input_parameter< int >::type n1(n1SEXP );
        Rcpp::traits::input_parameter< int >::type n2(n2SEXP );
        double __result = C_noise_estimation(x, n1, n2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_aibin_buckets
SEXP C_aibin_buckets(SEXP x, SEXP b, SEXP v, SEXP l, int n1, int n2);
RcppExport SEXP Rnmr1D_C_aibin_buckets(SEXP xSEXP, SEXP bSEXP, SEXP vSEXP, SEXP lSEXP, SEXP n1SEXP, SEXP n2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Rcpp::traits::input_parameter< SEXP >::type b(bSEXP );
        Rcpp::traits::input_parameter< SEXP >::type v(vSEXP );
        Rcpp::traits::input_parameter< SEXP >::type l(lSEXP );
        Rcpp::traits::input_parameter< int >::type n1(n1SEXP );
        Rcpp::traits::input_parameter< int >::type n2(n2SEXP );
        SEXP __result = C_aibin_buckets(x, b, v, l, n1, n2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_buckets_integrate
SEXP C_buckets_integrate(SEXP x, SEXP b, int mode);
RcppExport SEXP Rnmr1D_C_buckets_integrate(SEXP xSEXP, SEXP bSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Rcpp::traits::input_parameter< SEXP >::type b(bSEXP );
        Rcpp::traits::input_parameter< int >::type mode(modeSEXP );
        SEXP __result = C_buckets_integrate(x, b, mode);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_all_buckets_integrate
SEXP C_all_buckets_integrate(SEXP x, SEXP b, int mode);
RcppExport SEXP Rnmr1D_C_all_buckets_integrate(SEXP xSEXP, SEXP bSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type x(xSEXP );
        Rcpp::traits::input_parameter< SEXP >::type b(bSEXP );
        Rcpp::traits::input_parameter< int >::type mode(modeSEXP );
        SEXP __result = C_all_buckets_integrate(x, b, mode);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// C_buckets_CSN_normalize
SEXP C_buckets_CSN_normalize(SEXP b);
RcppExport SEXP Rnmr1D_C_buckets_CSN_normalize(SEXP bSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type b(bSEXP );
        SEXP __result = C_buckets_CSN_normalize(b);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
